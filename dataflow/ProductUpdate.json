{
	"name": "ProductUpdate",
	"properties": {
		"folder": {
			"name": "RichardSwinBank/Chapter7"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "CheckthdatainProductTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSQLDB",
						"type": "DatasetReference"
					},
					"name": "dboProduct"
				}
			],
			"transformations": [
				{
					"name": "GetDifferentColumns"
				},
				{
					"name": "EliminateDuplicates"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowId as integer,",
				"          Retailer as string,",
				"          SalesMonth as date,",
				"          Product as string,",
				"          SalesValueUSD as decimal(19,2),",
				"          UnitsSold as integer,",
				"          RunSeqNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          Product as string,",
				"          ProductName as string,",
				"          WeightInOunces as decimal(19,2),",
				"          WeightInGrams as decimal(19,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CheckthdatainProductTable",
				"source1 derive(ProductName = trim(left(Product, length(Product) -length(:WeightString))),",
				"          WeightInOunces = toFloat(replace(:WeightString, :WeightUnit, ''))/iif(:WeightUnit=='g',28.3495,1.0),",
				"          WeightInGrams = multiply(toFloat(replace(:WeightString, :WeightUnit, '')),iif(:WeightUnit=='oz',28.3495,1.0)),",
				"          WeightString := right(Product,locate(' ',reverse(Product))-1),",
				"          WeightUnit := iif(endsWith(Product, 'oz'),'oz','g')) ~> GetDifferentColumns",
				"GetDifferentColumns aggregate(groupBy(Product),",
				"     ProductName = first(ProductName),",
				"          each(match(startsWith(name, 'Weight')), $$ = first($$))) ~> EliminateDuplicates",
				"EliminateDuplicates, CheckthdatainProductTable exists(EliminateDuplicates@Product == CheckthdatainProductTable@Product,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Product,",
				"          ProductName,",
				"          WeightInOunces,",
				"          WeightInGrams",
				"     )) ~> dboProduct"
			]
		}
	}
}